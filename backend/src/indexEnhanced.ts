import { logger } from './utils/logger';
import { balConApp } from './appEnhanced';

// Enhanced application startup
async function startEnhancedApplication(): Promise<void> {
  try {
    logger.info('üöÄ Starting Bal-Con Builders Enhanced Application...');
    logger.info('üìã Phase 5: Advanced Feature Enhancement');
    logger.info('üîß Features: Authentication, Real-time, Database Integration');

    // Start the enhanced application
    await balConApp.start();

    // Log successful startup
    logger.info('‚úÖ Enhanced application started successfully!');
    logger.info('');
    logger.info('üéâ Bal-Con Builders Enhanced API v2.0 is now running!');
    logger.info('');
    logger.info('üìä Available Features:');
    logger.info('   üîê JWT Authentication with role-based access');
    logger.info('   üîå Real-time WebSocket communication');
    logger.info('   üíæ Enhanced database models and relationships');
    logger.info('   üìù Project activity tracking');
    logger.info('   üõ°Ô∏è  Security middleware and rate limiting');
    logger.info('   üìÅ File upload and management');
    logger.info('   üìß Enhanced user management');
    logger.info('');
    logger.info('üåê API Endpoints:');
    logger.info('   üìã Health: /api/health');
    logger.info('   üîê Auth: /api/auth/*');
    logger.info('   ÔøΩ Users: /api/users/*');
    logger.info('   ÔøΩüìä Projects: /api/projects/*');
    logger.info('   üí∞ Quotes: /api/quotes/*');
    logger.info('   üì¶ Orders: /api/orders/*');
    logger.info('   üìÅ Files: /api/files/*');
    logger.info('   üß™ Test: /api/test/*');
    logger.info('');
    logger.info('üîë Default Admin Credentials:');
    logger.info('   üìß Email: owner@balconbuilders.com');
    logger.info('   üîí Password: admin123');
    logger.info('');
    logger.info('üîÑ To reset database: npm run db:reset');
    logger.info('üå± To seed data: npm run db:seed');

  } catch (error) {
    logger.error('‚ùå Failed to start enhanced application:', error);
    process.exit(1);
  }
}

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  logger.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

// Start the application
if (require.main === module) {
  startEnhancedApplication();
}

export { startEnhancedApplication };
