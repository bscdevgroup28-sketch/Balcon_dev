"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.startEnhancedApplication = startEnhancedApplication;
const logger_1 = require("./utils/logger");
const appEnhanced_1 = require("./appEnhanced");
// Enhanced application startup
async function startEnhancedApplication() {
    try {
        logger_1.logger.info('üöÄ Starting Bal-Con Builders Enhanced Application...');
        logger_1.logger.info('üìã Phase 5: Advanced Feature Enhancement');
        logger_1.logger.info('üîß Features: Authentication, Real-time, Database Integration');
        // Start the enhanced application
        await appEnhanced_1.balConApp.start();
        // Log successful startup
        logger_1.logger.info('‚úÖ Enhanced application started successfully!');
        logger_1.logger.info('');
        logger_1.logger.info('üéâ Bal-Con Builders Enhanced API v2.0 is now running!');
        logger_1.logger.info('');
        logger_1.logger.info('üìä Available Features:');
        logger_1.logger.info('   üîê JWT Authentication with role-based access');
        logger_1.logger.info('   üîå Real-time WebSocket communication');
        logger_1.logger.info('   üíæ Enhanced database models and relationships');
        logger_1.logger.info('   üìù Project activity tracking');
        logger_1.logger.info('   üõ°Ô∏è  Security middleware and rate limiting');
        logger_1.logger.info('   üìÅ File upload and management');
        logger_1.logger.info('   üìß Enhanced user management');
        logger_1.logger.info('');
        logger_1.logger.info('üåê API Endpoints:');
        logger_1.logger.info('   üìã Health: /api/health');
        logger_1.logger.info('   üîê Auth: /api/auth/*');
        logger_1.logger.info('   üìä Projects: /api/projects/*');
        logger_1.logger.info('   üí∞ Quotes: /api/quotes/*');
        logger_1.logger.info('   üìÅ Files: /api/files/*');
        logger_1.logger.info('   üß™ Test: /api/test/*');
        logger_1.logger.info('');
        logger_1.logger.info('üîë Default Admin Credentials:');
        logger_1.logger.info('   üìß Email: owner@balconbuilders.com');
        logger_1.logger.info('   üîí Password: admin123');
        logger_1.logger.info('');
        logger_1.logger.info('üîÑ To reset database: npm run db:reset');
        logger_1.logger.info('üå± To seed data: npm run db:seed');
    }
    catch (error) {
        logger_1.logger.error('‚ùå Failed to start enhanced application:', error);
        process.exit(1);
    }
}
// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
    logger_1.logger.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
    process.exit(1);
});
// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
    logger_1.logger.error('‚ùå Uncaught Exception:', error);
    process.exit(1);
});
// Start the application
if (require.main === module) {
    startEnhancedApplication();
}
